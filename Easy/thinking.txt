#1:
   A1. 暴力解法，直接遍历每种可能。
   A2. 使用hash，首先将数组的所有元素添加进hash表中。该表的Key是整数，Value
       是在数组中的下标。主要的思路是使用map.containsKey函数，该函数若能命中
       key那么时间复杂度是O(1)，否则是O(n) （红黑树寻找）。具体实行是遍历nums
       数组，用target减去每个元素的值，使用containsKey寻找这个差值。但极端的
       情况下该方法的时间复杂度似乎与A1相同。

#2:
   A1. 转换成字符串(StringBuffer)，调用reverse()。若是负数再对负号单独处理。
       返回结果的时候判断是否溢出(通过捕获异常)。 （这个做法太憨憨了）
   A2. 主要思路是将整数的末尾数字弹出，并加到新整数的后边。
       pop = x % 10  （弹出的数）
       x /= 10     （更新x）
       ans = ans * 10 + pop （新的整数）
       执行弹出，压入操作前，先判断下一步是否会溢出
       ans * 10 / 10 != ans (**)

#9：
   对于负数可以直接返回false。
   A1. 使用了A2#2的方法，同样的弹出数字末尾的数，压入新的数字。最后比较一下两
       个数是否相同。相同则是回文数。
   A2. 转换成字符串，从第一位和最后一位开始，逐位向中间比较。

#13：
   A1. 按部就班的替换字符就行了。对于数字小的在数字大的左边就做减法，否则做加
       法。

#14：
   A1. 将所有字符串按位逐位对齐，之后逐列进行判断。
   A2. 设LCP(S_1, S_2, S_3 .... S_n)为最长公共前缀
       于是有，LCP(S_1, S_2, S_3 .... S_n) = LCP(LCP(LCP(S_1,S_2),S_3)...S_n)
       我觉得可以再进一步优化，比如找出最短的字符串作为初始串进行比较。或者
       在找两个串的公共前缀时可以用二分法，这样可以加速寻找速度。

#20：
   A1. 使用栈来解决。读取符号串，遇到开括号就将其压入栈中，遇到闭括号则弹出栈顶
       的括号，然后判断两个括号是否为相同类型。最后遍历完整个符号串时需保证栈是
       空的。若最后不为空则返回false。
       *关于括号类型匹配可以使用hashmap，该效率高于if-else。
       *处理()]这类串时，可以发现此时的栈是空的，那么可以当作弹出了一个非括号的
        符号，这样必然是不匹配的，因此会返回false。

#21：
   A1. 不用构造新的节点（走弯路），只需要将现有的节点连起来即可。开始需要设置一个
       哨兵记录链表的起始节点。另一个负责往下将节点连接。
       最终的结果为哨兵的下一个节点(抛弃掉哨兵节点)。
       *哨兵节点的作用仅仅是记录起始的位置。

#26:
   A1. 双指针法，一个快指针，一个慢指针。快指针逐渐向后访问，满足条件就将内容赋值
       给慢指针所指的位置。

#27：
   A2. 与#26相同。

#28（*）：
   A1. 直接调用indexOf()，哈哈哈哈。
   A2. 使用Sunday算法。
       Sunday：https://www.jianshu.com/p/a3f8d72c8405
               https://blog.csdn.net/v_JULY_v/article/details/7041827
       Sunday算法根据主串匹配模式串的下一位来执行操作。若这位的字符不属于模式串，
       那么
          移动位数 = 模式串长度 + 1
       否则
          移动位数 = 模式串长度 - 该字符最右出现的位置(从0开始)。

#35
  A1. 二分查找。注意right的起始为总长度减去一。
      踩过的坑：
      (*)mid = (left+right)/2 不是 right-left。 (被自己蠢哭)
      (*)修改边界的时候记得加减一

          

